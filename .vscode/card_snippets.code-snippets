{
	"spell": {
		"scope": "lua",
		"prefix": "spell",
		"body": [
			"function _CreateCard(props)",
			"\tprops.cost = $1",
			"",
			"\tlocal result = CardCreation:Spell(props)",
			"",
			"\tresult.EffectP:AddLayer(",
			"\t\tfunction (player)",
			"\t\t\t$0",
			"\t\t\treturn nil, true",
			"\t\tend",
			"\t)",
			"",
			"\treturn result",
			"end"
		],
		"description": "create script for spell card"
	},

	"unit": {
		"scope": "lua",
		"prefix": "unit",
		"body": [
			"function _CreateCard(props)",
			"\tprops.cost = $1",
			"\tprops.power = $2",
			"\tprops.life = $3",
			"",
			"\tlocal result = CardCreation:Unit(props)",
			"\t",
			"\t$0",
			"\t",
			"\treturn result",
			"end"
		],
		"description": "create script for spell card"
	},
	
	"treasure": {
		"scope": "lua",
		"prefix": "treasure",
		"body": [
			"function _CreateCard(props)",
			"\tprops.cost = $1",
			"\tprops.life = $2",
			"",
			"\tlocal result = CardCreation:Treasure(props)",
			"\t",
			"\t$0",
			"\t",
			"\treturn result",
			"end"
		],
		"description": "create script for spell card"
	},

	"on turn start": {
		"scope": "lua",
		"prefix": "onturnstart",
		"description": "on the start of your turn",
		"body": [
			"result.triggers[#result.triggers+1] = EffectCreation:TriggerBuilder()",
			"\t:Check(Common:IsOwnersTurn(result))",
			"\t:Cost(${1:Common:NoCost()})",
			"\t:IsSilent(false)",
			"\t:On(TRIGGERS.TURN_START)",
			"\t:Zone(ZONES.${2:UNITS})",
			"\t:Effect(function (player, args)",
			"\t\t$0",
			"\tend)",
			"\t:Build()"
		]
	},

	"on leave play": {
		"scope": "lua",
		"prefix": "onleave",
		"description": "on leaving play",
		"body": [
			"local prevLeave = result.LeavePlay",
			"function result:LeavePlay(player)",
			"\tprevLeave(self, player)",
			"\t$0",
			"end"
		]
	},
	
	"mutable": {
		"scope": "lua",
		"prefix": "mut",
		"body": [
			"${1:result}.mutable.$2 = {",
			"\tmin = $3,",
			"\tcurrent = $4,",
			"\tmax = $0",
			"}"
		],
		"description": "create a mutable value"
	},

	"on enter unit": {
		"scope": "lua",
		"prefix": "onenter",
		"body": [
			"result.OnEnterP:AddLayer(",
			"\tfunction (player)",
			"\t\t$0",
			"\t\treturn nil, true",
			"\tend",
			")"
		],
		"description": "unit on enter play trigger"
	},
	
	"can play card": {
		"scope": "lua",
		"prefix": "canplay",
		"body": [
			"result.CanPlayP:AddLayer(",
			"\tfunction (player)",
			"\t\treturn nil, $0",
			"\tend",
			")",
		],
		"description": "unit on enter play trigger"
	},

	"trigger": {
		"scope": "lua",
		"prefix": "trigger",
		"body": [
			"result.triggers[#result.triggers+1] = EffectCreation:TriggerBuilder()",
			"\t:Check($1)",
			"\t:IsSilent(${2:false})",
			"\t:On(TRIGGERS.$3)",
			"\t:Zone(ZONES.$4)",
			"\t:Cost($5)",
			"\t:Effect(function ($6)",
			"\t\t$0",
			"\tend)",
			":Build()"
	
		],
		"description": "triggered effect"
	}
	// Place your cardgame workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}